<?php
// $Id$

/**
 * @file
 * Code for Comment Sources module.
 */

module_load_include('api.inc', 'comment_sources');

/**
 * Implements hook_menu().
 */
function comment_sources_menu() {
  $items = array();
  $items['admin/config/services/comment_sources'] = array(
    'title' => 'Comment Sources',
    'description' => 'Select commenting system(s) to use',
    'access arguments' => array('administer comments and comment settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comment_sources_admin_settings_form'),
    'file' => 'comment_sources.admin.inc',
  );
  $items['comment_sources/record_comment'] = array(
    'title' => 'Record new comment',
    'description' => 'Record creation of a new comment by a third-party commenting source',
    'access arguments' => array('access content'),
    'page callback' => 'comment_sources_record_comment_ajax',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Gets list of supported comment sources.
 *
 * In some cases (fb_social) a module can provide multiple comment sources.
 * If that's the case, provide a callback function to retrieve each comment
 * source associated with that module.
 *
 * @return array $sources
 */
function _comment_sources_sources() {
  $base_sources = array(
    'comment' => array(
      'description' => t('Drupal Comments'),
      'supports_recent_comments' => TRUE,
    ),
    'disqus' => array(
      'description' => t('Disqus Comments'),
      'supports_recent_comments' => TRUE,
    ),
    'fb_social' => array(
      'description' => t('Facebook Comments'),
      'supports_recent_comments' => FALSE,
      'children_callback' => 'comment_sources_fb_social',
    ),
  );
  $other_sources = module_invoke_all("comment_sources");

  $sources = array_merge_recursive($base_sources, $other_sources);
  drupal_alter('comment_sources', $sources);

  return $sources;
}

/**
 * Gets list of the currently enabled comment sources
 *
 * @return array $enabled_sources
 */
function comment_sources_enabled_sources() {
  $enabled_sources = &drupal_static(__FUNCTION__);
  if (!is_null($enabled_sources)) {
    return $enabled_sources;
  }

  $sources = _comment_sources_sources();
  $enabled_sources = array();

  // Checks to ensure the comment source modules are enabled
  foreach ($sources as $key => $value) {
    if (module_exists($key)) {
      if (isset($value['children_callback'])) {
        $enabled_sources = array_merge($enabled_sources, call_user_func($value['children_callback'], $value));
      }
      else {
        $enabled_sources[$key] = $value;
      }
    }
  }
  return $enabled_sources;
}

/**
 * Gets the available comment presets for fb_social.
 *
 * fb_social has a separate comment source for each preset.
 */
function comment_sources_fb_social($source) {
  $presets = function_exists('fb_social_get_presets_by_type') ? fb_social_get_presets_by_type('comments') : array();
  $enabled_sources = array();
  if (count($presets) > 0) {
    foreach ($presets as $preset) {
      $enabled_sources[join(":", array('fb_social', $preset->name))] = array(
        'description' => $preset->name,
      );
    }
  }
  return $enabled_sources;
}

/**
 * Sets the comment source for this content type, with appropriate options.
 */
function comment_sources_set_source($content_type, $source) {
  $enabled_sources = comment_sources_enabled_sources();
  $selected_sources = comment_sources_load($enabled_sources);

  // Check for bogus content types
  if (!array_key_exists($content_type, node_type_get_types())) {
    return FALSE;
  }

  if (!empty($source)) {
    // Check for bogus comment sources
    if (!array_key_exists($source, $enabled_sources)) {
      return FALSE;
    }
    $selected_sources[$content_type] = $source;
  }
  else {
    unset($selected_sources[$content_type]);
  }
  comment_sources_save($enabled_sources, $selected_sources);

  return TRUE;
}

/**
 * Gets the comment source for this content type.
 */
function comment_sources_get_source($content_type) {
  $enabled_sources = comment_sources_enabled_sources();
  $selected_sources = comment_sources_load($enabled_sources);
  return isset($selected_sources[$content_type]) ? $selected_sources[$content_type] : '';
}

/**
 * Records the enabled/disabled comments status for for a node for a comment source
 */
function comments_sources_set_node_status($node, $source, $status) {
  $record = db_select('comment_sources_comments', 'c')->condition('c.nid', $node->nid)->condition('c.source', $source)->fields('c', array('nid'))->execute();
  $data = array(
    'nid' => $node->nid,
    'source' => $source,
    'status' => $status,
  );
  if ($record->rowCount() > 0) {
    drupal_write_record('comment_sources_comments', $data, array('nid', 'source'));
  }
  else {
    drupal_write_record('comment_sources_comments', $data);
  }
}

/**
 * Returns if comments have been disabled for this node and source.
 *
 * Additionally, checks if there are no comments from another comment source.
 *
 * Assumes the source is the selected source for the content type.
 */
function comment_sources_should_display_comments($node, $source) {
  $result = TRUE;
  if ($node && $node->nid) {
    $record = db_select('comment_sources_comments', 'c')->condition('c.nid', $node->nid)->fields('c', array('source', 'status', 'has_comments'))->execute();
    foreach ($record as $row) {
      if ($row->source == $source) {
        // Always display if there are comments for the selected source
        if ($row->has_comments) {
          $result = TRUE;
          break;
        }
        // Disable if comments not enabled for the node
        else {
          if (!$row->status) {
            $result = FALSE;
          }
        }
      }
      else {
        // Disable if there are comments for another content type
        if ($row->has_comments) {
          $result = FALSE;
        }
      }
    }
  }
  return $result;
}

/**
 * Checks if this comment source has any comments for this node.
 */
function comment_sources_has_comments($node, $source) {
  $result = &drupal_static(__FUNCTION__, array());
  if (!isset($result[$source])) {
    $result[$source] = array();
  }

  if (!isset($node->nid)) {
    return FALSE;
  }

  if (isset($result[$source][$node->nid])) {
    return $result[$source][$node->nid];
  }

  $result[$source][$node->nid] = FALSE;
  if ($node && $node->nid) {
    $record = db_select('comment_sources_comments', 'c')->condition('c.nid', $node->nid)->condition('c.source', $source)->fields('c', array('has_comments'))->execute();
    if ($record->rowCount() == 1) {
      $result[$source][$node->nid] = ($record->fetchField(0) == 1);
    }
  }
  return $result[$source][$node->nid];
}

/**
 * Checks if the given content source supports retrieving recent comments.
 */
function comment_sources_supports_recent_comments($source) {
  $sources = _comment_sources_sources();
  $result = isset($sources[$source]) ? $sources[$source]['supports_recent_comments'] : FALSE;
  return $result;
}

/**
 * Get the most recent comments for a content source and content type
 */
function comment_sources_recent_comments($source, $count = 10) {
  $result = array();
  $function_name = "_comment_sources_recent_comments_" . $source;
  if (function_exists($function_name)) {
    $result = call_user_func_array($function_name, array($count));
  }
  return $result;
}

/**
 * Implements hook_form_alter().
 */
function comment_sources_form_alter(&$form, $form_state, $form_id) {

  // Node type edit page
  if ($form_id == 'node_type_form' && isset($form['#node_type'])) {
    if (isset($form['comment'])) {
      $default_source = comment_sources_get_source($form['#node_type']->type);

      /* Override the standard comment javascript with our improved version that also handles comment sources */

      $form['comment']['#attached'] = array(
        'js' => array(drupal_get_path('module', 'comment_sources') . '/comment_sources-node-form.js'),
      );

      /* Only display the default comment option controls if using Drupal comments */

      foreach ($form['comment'] as & $form_element) {
        if (is_array($form_element) && isset($form_element['#type'])) {
          $form_element['#states'] = array(
            'visible' => array(
              ':input[name="comment_source"]' => array('value' => 'comment'),
            ),
          );
        }
      }

      $form['comment']['comment_source'] = array(
        '#type' => 'select',
        '#title' => t('Comment source'),
        '#default_value' => !empty($default_source) ? $default_source : 'comment',
        '#options' => comment_sources_node_options(comment_sources_enabled_sources()),
        '#weight' => -20,
      );

      // TODO: Test the case where this is an array. Need to find another module that hooks into the submit form
      if (isset($form['actions']['submit']['#submit']) && is_array($form['actions']['submit']['#submit'])) {
        $form['actions']['submit']['#submit'][] = '_comment_sources_node_type_form_submit';
      }
      else {
        $form['actions']['submit']['#submit'] = array('_comment_sources_node_type_form_submit', 'node_type_form_submit');
      }
    }
  }
  // Node edit page
  elseif (!empty($form['#node_edit_form'])) {

    // Hide settings for inappropriate comment types
    $node = $form['#node'];
    if (isset($node->type)) {
      $default_source = comment_sources_get_source($node->type);
      // Remove the preset name from fb_social sources
      $default_source = preg_replace('/:.*$/', '', $default_source);

      switch ($default_source) {
        case 'comment':
        case '':
          unset($form['comment_settings']['disqus_status']);
          unset($form['comment_settings']['fb_social_status']);
          break;

        case 'disqus':
          // Don't hide Drupal comment options if there are pre-existing comments. Note that if the comments
          // status is 'Hidden', comment_count will always be zero
          if (!isset($node->comment_count) || ($node->comment_count == 0)) {
            unset($form['comment_settings']['comment']);
          }
          unset($form['comment_settings']['fb_social_status']);
          $form['comment_settings']['#access'] = user_access('toggle disqus comments');
          break;

        case 'fb_social':
          // See comment above re: disqus
          if (!isset($node->comment_count) || ($node->comment_count == 0)) {
            unset($form['comment_settings']['comment']);
          }
          unset($form['comment_settings']['disqus_status']);

          // Add node-specific Facebook comment settings, since they the aren't done in the fb_social module
          if (!isset($form['comment_settings'])) {
            $form['comment_settings'] = array(
              '#type' => 'fieldset',
              '#title' => t('Comment settings'),
              '#collapsible' => TRUE,
              '#collapsed' => TRUE,
              '#group' => 'additional_settings',
              '#weight' => 30,
            );
          }
          else {
            if (isset($form['comment_settings']['comment'])) {
              $form['comment_settings']['comment']['#access'] = $form['comment_settings']['#access'];
              $form['comment_settings']['#access'] = TRUE;
            }
          }

          if (isset($node->nid)) {
            $status = db_query("SELECT status FROM {comment_sources_comments} WHERE nid = :nid", array(':nid' => $node->nid))->fetchObject();
          }

          $form['comment_settings']['fb_social_status'] = array(
            '#type' => 'checkbox',
            '#title' => t('Facebook comments'),
            '#description' => t('Users can post comments using Facebook.'),
            '#default_value' => isset($status->status) ? $status->status : TRUE,
          );
          break;
      }
      /* Override the standard comment javascript with our improved version that also handles comment sources */

      if (isset($form['comment_settings'])) {
        $form['comment_settings']['#attached'] = array(
          'js' => array(drupal_get_path('module', 'comment_sources') . '/comment_sources-node-form.js'),
        );
      }
    }
  }
}

/**
 * Saves the comment source setting for a content type
 */
function _comment_sources_node_type_form_submit(&$form, $form_state) {
  if (isset($form['#node_type'])) {
    comment_sources_set_source($form['#node_type']->type, $form['comment']['comment_source']['#value']);
  }
}

/**
 * Get the list of comment source options that can be used in a form element
 */
function comment_sources_node_options($sources) {
  $node_options = array();
  foreach ($sources as $key => $value) {
    $node_options[$key] = $value['description'];
  }
  return $node_options;
}

/**
 * Get Facebook Social comment presets
 */
function _comment_sources_preset_fb_social() {
  $presets = array();
  if (function_exists('fb_social_get_presets_by_type')) {
    $presets = fb_social_get_presets_by_type('comments');
  }
  return $presets;
}

/**
 * Load the existing comment source selections and return as an associative array of comment sources keyed by node type
 * Where there are multiple comment sources provided by the same module, the source names will be of the form
 * 'module_name:source_name'
 */
function comment_sources_load($sources) {
  $default_values = array();
  foreach (array_keys($sources) as $key) {
    preg_match('/:(.*$)/', $key, $matches);
    $function_name = "_comment_sources_load_" . preg_replace('/:.*$/', '', $key);
    if (function_exists($function_name)) {
      $params = array();
      if (count($matches) > 1) {
        $params[] = $matches[1];
      }
      $node_type_names = call_user_func_array($function_name, $params);
      foreach ($node_type_names as $node_type_name) {
        $default_values[$node_type_name] = $key;
      }
    }
  }
  /* Make sure that node types with no comment sources get a value in the array */

  foreach (node_type_get_types() as $node_type) {
    if (!array_key_exists($node_type->type, $default_values)) {
      $default_values[$node_type->type] = '';
    }
  }
  return $default_values;
}

/**
 * Retrieve the Disqus node types comment settings as an array of node types using Disqus comments
 */
function _comment_sources_load_disqus() {
  return variable_get('disqus_nodetypes', array());
}

/**
 * Retrieve the Facebook preset node types comment settings as an array of node types using Facebook comments
 */
function _comment_sources_load_fb_social($variant = '') {
  $result = array();
  if ($variant && function_exists('fb_social_preset_load')) {
    $preset = fb_social_preset_load($variant);
    $result = $preset->settings['node_types']['types'];
  }
  return $result;
}

/**
 * Retrieve the Drupal node types comment settings as an array of node types using Drupal core comments
 */
function _comment_sources_load_comment() {
  $result = &drupal_static(__FUNCTION__);
  if (!is_null($result)) {
    return $result;
  }

  $node_types = node_type_get_types();
  $result = array();
  foreach ($node_types as $node_type) {
    $setting = variable_get("comment_" . $node_type->type, COMMENT_NODE_CLOSED);
    if ($setting == COMMENT_NODE_OPEN) {
      $result[$node_type->type] = $node_type->type;
    }
  }
  return $result;
}

/**
 * Save the comment source selections by node type, given a list of available comment sources and
 * an associative array of the new comment sources, keyed by node type
 */
function comment_sources_save($available_sources, $selected_sources) {

  $selections = array();
  foreach ($selected_sources as $key => $value) {
    $selections[$value][$key] = $key;
  }

  //Source Settings
  $source_settings = _comment_sources_sources();

  foreach ($available_sources as $key => $value) {
    preg_match('/:(.*$)/', $key, $matches);
    $source = preg_replace('/:.*$/', '', $key);

    //Determine the correct save function
    if (isset($source_settings[$source]['save_function'])) {
      $function_name = $source_settings[$source]['save_function'];
    }
    else {
      $function_name = "_comment_sources_save_" . $source;
    }

    if (function_exists($function_name)) {
      $params = array(isset($selections[$key]) ? $selections[$key] : array());
      // If we need to add a preset
      if (count($matches) > 1) {
        $params[] = $matches[1];
      }
      call_user_func_array($function_name, $params);
    }
  }
}

/**
 * Save the Disqus node types comment settings
 */
function _comment_sources_save_disqus($comment_node_types) {
  variable_set('disqus_nodetypes', $comment_node_types);
}

/**
 * Save the Facebook node type comments settings
 */
function _comment_sources_save_fb_social($comment_node_types, $preset_name = '') {
  if ($preset_name && function_exists('fb_social_preset_load')) {
    $preset = fb_social_preset_load($preset_name);
    $preset->settings['node_types']['types'] = $comment_node_types;
    ctools_export_crud_save($preset->table, $preset);
  }
}

/**
 * Save the Drupal comments node types comment settings
 * Note: We do not have an option to set the default comment to be 'hidden'
 */
function _comment_sources_save_comment($comment_node_types) {
  $node_types = node_type_get_types();
  foreach ($node_types as $node_type) {
    variable_set(
      "comment_" . $node_type->type,
      isset($comment_node_types[$node_type->type]) ? COMMENT_NODE_OPEN : COMMENT_NODE_HIDDEN
    );
  }
}

/**
 * Get the most recent Drupal comments for a content type
 */
function _comment_sources_recent_comments_comment($count) {
  $query = db_select('comment', 'c');
  $query->innerJoin('node', 'n', 'n.nid = c.nid');
  $query->addTag('node_access');
  $query->fields('c')->condition('c.status', COMMENT_PUBLISHED)->condition('n.status', NODE_PUBLISHED);
  // Additionally order by cid to ensure that comments with the same timestamp
  $comments = $query->orderBy('c.created', 'DESC')
  // are returned in the exact order posted.
  ->orderBy('c.cid', 'DESC')->range(0, $count)->execute()->fetchAll();

  return $comments ? $comments : array();
}

/**
 * Get the most recent Disqus comments for a content type
 */
function _comment_sources_recent_comments_disqus($count) {
  $posts = array();

  $user_api_key = variable_get('disqus_userapikey', '');
  if (empty($user_api_key)) {
    watchdog('comment_sources', "User API key required to display recent Disqus comments", array(), WATCHDOG_ERROR);
  }
  else {
    try {
      $disqus = disqus($user_api_key);
      $forums = $disqus->get_forum_list();
      if (count($forums) != 1) {
        watchdog('comment_sources', "More than one Disqus forum returned. Cannot display recent Disqus comments", array(), WATCHDOG_ERROR);
      }
      else {
        $forum_id = $forums[0]->id;
        $forum_api_key = $disqus->get_forum_api_key($forum_id);
        if (empty($forum_api_key)) {
          watchdog('comment_sources', "Could not retrieve forum key to display recent Disqus comments", array(), WATCHDOG_ERROR);
        }
        else {
          $posts = $disqus->get_forum_posts($forum_id, array('forum_api_key' => $forum_api_key, 'limit' => $count));
        }
      }
    }
    catch(DisqusException$d) {
      watchdog('comment_sources', "Error trying to retrieve comments from Disqus", array(), WATCHDOG_ERROR);
    }
  }
  return $posts;
}

/**
 * Get the most recent Facebook comments for a content type
 */
function _comment_sources_recent_comments_fb_social($content_type, $count) {
  return array();
}

/**
 * Implements hook_node_view().
 */
function comment_sources_node_view($node, $view_mode) {
  //Add javascript for recording comments made in a third-party system
  if (!in_array(comment_sources_get_source($node->type), array('comment', ''))) {
    drupal_add_js(array('comment_sources' => array('nid' => $node->nid)), 'setting');
    drupal_add_js(drupal_get_path('module', 'comment_sources') . '/comment_sources.js');
  }
}

/**
 * Implements hook_node_load().
 * For Disqus nodes, checks to see if the comments should be displayed
 */
function comment_sources_node_load($nodes, $types) {
  foreach ($nodes as & $node) {
    if (isset($node->disqus)) {
      $node->disqus['status'] = comment_sources_should_display_comments($node, 'disqus');
    }
  }
}

/**
 * Record creation of a comment in a third party commenting system. Triggered by client-side javascript at comment
 * creation.
 */
function comment_sources_record_comment_ajax() {
  $query_data = array(
    'nid' => filter_input(INPUT_GET, 'nid', FILTER_VALIDATE_INT),
    'source' => $_GET['source'],
  );
  if (!empty($query_data['source']) && !empty($query_data['nid'])) {
    $record = db_select('comment_sources_comments', 'c')->condition('c.nid', $query_data['nid'])->condition('c.source', $query_data['source'])->fields('c', array('nid'))->execute();
    $data = array(
      'nid' => $query_data['nid'],
      'source' => $query_data['source'],
      'has_comments' => TRUE,
    );
    if ($record->rowCount() > 0) {
      drupal_write_record('comment_sources_comments', $data, array('nid', 'source'));
    }
    else {
      drupal_write_record('comment_sources_comments', $data);
    }
  }
}

/**
 * Implements hook_fb_social_event_subscribe().
 */
function comment_sources_fb_social_event_subscribe() {
  // integration with google analytics
  return array(
    'FB.Event.subscribe("comment.create", function(response) {',
    'fb_social_track_comments(response);',
    '});',
  );
}

/**
 * Implements hook_node_delete().
 */
function comment_sources_node_delete($node) {
  if (module_exists('comment_sources')) {
    db_delete('comment_sources_comments')->condition('nid', $node->nid)->execute();
  }
}

/**
 * Implements hook_node_insert().
 *
 * Need to record status for nodes with Disqus / Facebook comments, to indicate whether they should
 * be displayed or not.
 */
function comment_sources_node_insert($node) {
  if (isset($node->fb_social_status) && (comment_sources_get_source($node->type) == 'fb_social')) {
    comments_sources_set_node_status($node, 'fb_social', $node->fb_social_status);
  }
  else {
    if (isset($node->disqus_status) && (comment_sources_get_source($node->type) == 'disqus')) {
      comments_sources_set_node_status($node, 'disqus', ($node->disqus_status != FALSE));
    }
  }
}

/**
 * Implements hook_node_update().
 */
function comment_sources_node_update($node) {
  comment_sources_node_insert($node);
}

/**
 * Implements hook_views_api().
 */
function comment_sources_views_api() {
  return array(
    'api' => 3.0,
  );
}

